(ns threejs-cljs.core
  (:require
    [threejs-cljs.quadtree :as quadtree]
    [threejs-cljs.mouse-tracker :as mouse-tracker]
    [threejs-cljs.geometry :as geometry]
  )
)

(enable-console-print!)
(println "starting threejs-cljs")

(def root (quadtree/make-quadtree))
(set! root (quadtree/insert-quadtree root nil 0.33 0.33 2.5))
(def test-quadtree (quadtree/seek-quadtree root 0.33 0.33 2.5))
(println (:bounds test-quadtree))
(def test-segment (geometry/make-rect-lines (:bounds test-quadtree)))
(println test-segment)

(defn private-geometry-from-segments [segments geometry]
  (loop
    [
      segs segments
      geo []
    ]
    (if (empty? segs)
      (clj->js geo)
      (let
        [
          start (nth segs 0)
          stop (nth segs 1)
          vec3-start (js/THREE.Vector3. (* 100 (nth start 0)) (* 100 (nth start 1)) 0)
          vec3-stop (js/THREE.Vector3. (* 100 (nth stop 0)) (* 100 (nth stop 1)) 0)
          start-geo (conj geo vec3-start)
          stop-geo (conj start-geo vec3-stop)
        ]
        ;;(println "start: " (. vec3-start -x) (. vec3-start -y) (. vec3-start -z))
        ;;(println "stop: " vec3-stop)
        (recur (subvec segs 2) stop-geo)
      )
    )
  )
)

(defn geometry-from-segments [segments]
  (private-geometry-from-segments segments (make-array 0))
)

(def geo (geometry-from-segments test-segment))
(println geo)

(def geo3 (js/THREE.Geometry. geo))
(println geo3)

(def geo-raw
  [
  (js/THREE.Vector3 0 0 0)
  (js/THREE.Vector3 100 0 0)
  (js/THREE.Vector3 0 1000 0)
  ]
)
(def line-geo (js/THREE.Geometry. geo-raw))

;; Reset root after tests.
(set! root (quadtree/make-quadtree))

(def x-last 0)
(def y-last 0)
(def z-last 0)


(defn ^:export example []
  (let
    [
      scene (js/THREE.Scene.)
      width (.-innerWidth js/window)
      height (.-innerHeight js/window)
      camera (js/THREE.OrthographicCamera. -10.0 10.0 -10.0 10.0 -0.001 10000.0);;(js/THREE.PerspectiveCamera. 75 (/ width height) 0.1 1000 )
      renderer (js/THREE.WebGLRenderer.)
      geometry l(js/THREE.CubeGeometry. 1 1 1)
      material ((js/THREE.MeshBasicMaterial. (clj->js {:color 0x00ff00}))
      cube (js/THREE.Mesh. geometry material)
      render (fn cb []
        (let
          [
            x (.. camera -position -x)
            y (.. camera -position -y)
            z (.. camera -position -z)
          ]
          (js/requestAnimationFrame cb)
          ;(set! (.-x (.-rotation cube))  (+ 0.01 (.-x (.-rotation cube))) )
          ;(set! (.-y (.-rotation cube))  (+ 0.01 (.-y (.-rotation cube))) )

          ;; Don't traverse quadtree if camera has not moved.
          (if (or (not (== x x-last)) (not (== y y-last)) (not (== z z-last)))
            (do
              (println "current:" x y z)
              (set! root (quadtree/insert-quadtree root nil x y z))
              (let
                [
                  leaf (quadtree/seek-quadtree root x y z)
                  leaf-bounds (:bounds leaf)
                  segments (geometry/make-rect-lines leaf-bounds)
                ]
                (println "segments:" segments)
              )
            )
          )

          (println "rendering")
          (.render renderer scene camera)

          (set! x-last x)
          (set! y-last y)
          (set! z-last z)
        )
      )
    ]
    (mouse-tracker/track-camera camera js/document)
    (.setSize renderer width height)
    (.appendChild js/document.body (.-domElement renderer) )
    (.add scene cube)
    (set! (.-z (.-position camera))  0)
    (render)
  )
)


(example)
